{"version":3,"sources":["Card.js","CardList.js","Searchbox.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","monsters","map","user","i","key","Searchbox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","filteredMonsters","this","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAaeA,G,MAXF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACzB,OACI,yBAAKC,UAAU,oDACX,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAA1B,mBACpB,yBAAKC,UAAU,MACX,4BAAKH,GACL,2BAAIC,OCQLK,EAbE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAChB,OACI,6BAEQA,EAASC,KAAI,SAACC,EAAMC,GAChB,OACA,kBAAC,EAAD,CAAMC,IAAKD,EAAGR,GAAIK,EAASG,GAAGR,GAAIF,KAAMO,EAASG,GAAGV,KAAMC,MAAOM,EAASG,GAAGT,aCOlFW,EAdG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKV,UAAU,OACX,2BACAA,UAAU,4CACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCAPI,EAPA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,SACrCH,EAAMI,WCuCJC,E,YApCX,aAAe,IAAD,8BACV,+CAcJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAd1C,EAAKC,MAAQ,CACTvB,SAAU,GACVoB,YAAa,IAJP,E,iFAQM,IAAD,OACfI,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACnB,SAAU4B,S,+BAQvC,IAAD,OACEC,EAAmBC,KAAKP,MAAMvB,SAAS+B,QAAO,SAAA/B,GAChD,OAAOA,EAASP,KAAKuC,cAAcC,SAAS,EAAKV,MAAMH,YAAYY,kBAEvE,OACI,yBAAKpC,UAAU,MACX,yBAAKA,UAAU,oCAAf,eACA,kBAAC,EAAD,CAAWU,aAAcwB,KAAKb,iBAC9B,wBAAIrB,UAAU,SACd,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUI,SAAU6B,U,GA9BtBK,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACD,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD0HlC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.f4da5237.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return(\r\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robot' src={`https://robohash.org/${id}?size=200x200`} />\r\n            <div className='tc'>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js';\r\n\r\nconst CardList = ({ monsters }) => {\r\n    return(\r\n        <div>\r\n            {\r\n                monsters.map((user, i) => {\r\n                    return (\r\n                    <Card key={i} id={monsters[i].id} name={monsters[i].name} email={monsters[i].email}/>\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Searchbox = ({searchChange}) => {\r\n    return(\r\n        <div className='pa2'>\r\n            <input \r\n            className='pa3 ba bw1 b--dark-green bg-lightest-blue' \r\n            type='search' \r\n            placeholder='search robots' \r\n            onChange={searchChange}\r\n            />\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default Searchbox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', height: '60em'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\nexport default Scroll;","import React , { Component } from 'react';\r\nimport './App.css';\r\nimport CardList from './CardList.js';\r\nimport Searchbox from './Searchbox.js';\r\nimport Scroll from './Scroll.js';\r\nimport { monsters } from './monsters.js';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            monsters: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => this.setState({monsters: users}))\r\n            //this.setState({monsters: monsters})\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchfield: event.target.value})\r\n    }\r\n\r\n    render(){\r\n        const filteredMonsters = this.state.monsters.filter(monsters => {\r\n            return monsters.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n        })\r\n        return(\r\n            <div className='tc'>\r\n                <div className='f-subheadline lh-title tp4 title'>RoboFriends</div>\r\n                <Searchbox searchChange={this.onSearchChange} />\r\n                <hr className='ma3 '></hr>\r\n                <Scroll>\r\n                    <CardList monsters={filteredMonsters}/>\r\n                </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n        <App/>, document.getElementById('root')\n        );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}